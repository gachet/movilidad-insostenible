for (dest_code in unique(sbst_group$destination_ine_code)) {
tmp <- municipios %>%
filter(ine_code == dest_code) %>%
.$loc_string
destination <- paste(tmp, destination, sep = '|')
}
########### BUILD & CALL URL ###########
url <- paste0('https://maps.googleapis.com/maps/api/distancematrix/json?origins=',
origin,
'&destinations=',
destination,
'&mode=',
mode,
'&departure_time=',
dept_time,
'&traffic_model=',
traffic,
'&key=',
APIkey)
raw <- fromJSON(url)
########### RESHAPE THE DATA ###########
for (i in 1:(length(raw$destination_addresses))) {
# los datos
j <- length(raw$destination_addresses) - i + 1;
sbst <- jsonlite::flatten(raw$rows[1, ][[1]][j, ]) %>%
select(-contains('text')) %>%
mutate('origin' = raw$origin_addresses,
'origin_ine_code' = code,
'dest_ine_code' = sbst_group$destination_ine_code[i],
'destination' = raw$destination_addresses[j])
results <- bind_rows(results, sbst)
}
}
}
c
APIkey <-  'AIzaSyC7L2CfpwftaDK6XYoTDRN3ER6EAbc1tEM'
# for (c in 231:length(codes)) {
for (c in 100:130) {
code <- codes[c]
########### ORIGIN & DESTINATIONS ###########
origin <- municipios %>%
filter(ine_code == code) %>%
.$loc_string
# api limit: 25 origins or 25 destinations
# cut the  sbst_dest
sbst_dest <- lista_origen_trabajo %>%
filter(origin_ine_code == code) %>%
mutate(group = ceiling(row_number()/23))
for (g in unique(sbst_dest$group)) {
sbst_group <- filter(sbst_dest, group == g)
destination <- c()
for (dest_code in unique(sbst_group$destination_ine_code)) {
tmp <- municipios %>%
filter(ine_code == dest_code) %>%
.$loc_string
destination <- paste(tmp, destination, sep = '|')
}
########### BUILD & CALL URL ###########
url <- paste0('https://maps.googleapis.com/maps/api/distancematrix/json?origins=',
origin,
'&destinations=',
destination,
'&mode=',
mode,
'&departure_time=',
dept_time,
'&traffic_model=',
traffic,
'&key=',
APIkey)
raw <- fromJSON(url)
########### RESHAPE THE DATA ###########
for (i in 1:(length(raw$destination_addresses))) {
# los datos
j <- length(raw$destination_addresses) - i + 1;
sbst <- jsonlite::flatten(raw$rows[1, ][[1]][j, ]) %>%
select(-contains('text')) %>%
mutate('origin' = raw$origin_addresses,
'origin_ine_code' = code,
'dest_ine_code' = sbst_group$destination_ine_code[i],
'destination' = raw$destination_addresses[j])
results <- bind_rows(results, sbst)
}
}
}
c
APIkey <-  'AIzaSyDUe5aWAN_P2UFHVgcMefP1dBrcqWKjRj0'
# for (c in 231:length(codes)) {
for (c in 116:140) {
code <- codes[c]
########### ORIGIN & DESTINATIONS ###########
origin <- municipios %>%
filter(ine_code == code) %>%
.$loc_string
# api limit: 25 origins or 25 destinations
# cut the  sbst_dest
sbst_dest <- lista_origen_trabajo %>%
filter(origin_ine_code == code) %>%
mutate(group = ceiling(row_number()/23))
for (g in unique(sbst_dest$group)) {
sbst_group <- filter(sbst_dest, group == g)
destination <- c()
for (dest_code in unique(sbst_group$destination_ine_code)) {
tmp <- municipios %>%
filter(ine_code == dest_code) %>%
.$loc_string
destination <- paste(tmp, destination, sep = '|')
}
########### BUILD & CALL URL ###########
url <- paste0('https://maps.googleapis.com/maps/api/distancematrix/json?origins=',
origin,
'&destinations=',
destination,
'&mode=',
mode,
'&departure_time=',
dept_time,
'&traffic_model=',
traffic,
'&key=',
APIkey)
raw <- fromJSON(url)
########### RESHAPE THE DATA ###########
for (i in 1:(length(raw$destination_addresses))) {
# los datos
j <- length(raw$destination_addresses) - i + 1;
sbst <- jsonlite::flatten(raw$rows[1, ][[1]][j, ]) %>%
select(-contains('text')) %>%
mutate('origin' = raw$origin_addresses,
'origin_ine_code' = code,
'dest_ine_code' = sbst_group$destination_ine_code[i],
'destination' = raw$destination_addresses[j])
results <- bind_rows(results, sbst)
}
}
}
c
write_csv(results, 'temp_results.csv')
# for (c in 231:length(codes)) {
for (c in 141:160) {
code <- codes[c]
########### ORIGIN & DESTINATIONS ###########
origin <- municipios %>%
filter(ine_code == code) %>%
.$loc_string
# api limit: 25 origins or 25 destinations
# cut the  sbst_dest
sbst_dest <- lista_origen_trabajo %>%
filter(origin_ine_code == code) %>%
mutate(group = ceiling(row_number()/23))
for (g in unique(sbst_dest$group)) {
sbst_group <- filter(sbst_dest, group == g)
destination <- c()
for (dest_code in unique(sbst_group$destination_ine_code)) {
tmp <- municipios %>%
filter(ine_code == dest_code) %>%
.$loc_string
destination <- paste(tmp, destination, sep = '|')
}
########### BUILD & CALL URL ###########
url <- paste0('https://maps.googleapis.com/maps/api/distancematrix/json?origins=',
origin,
'&destinations=',
destination,
'&mode=',
mode,
'&departure_time=',
dept_time,
'&traffic_model=',
traffic,
'&key=',
APIkey)
raw <- fromJSON(url)
########### RESHAPE THE DATA ###########
for (i in 1:(length(raw$destination_addresses))) {
# los datos
j <- length(raw$destination_addresses) - i + 1;
sbst <- jsonlite::flatten(raw$rows[1, ][[1]][j, ]) %>%
select(-contains('text')) %>%
mutate('origin' = raw$origin_addresses,
'origin_ine_code' = code,
'dest_ine_code' = sbst_group$destination_ine_code[i],
'destination' = raw$destination_addresses[j])
results <- bind_rows(results, sbst)
}
}
}
c
APIkey <-  'AIzaSyD4cYwV1h-fcdnmGH_Ewg1uV7cWYjxromg'
write_csv(results, 'temp_results.csv') # 140
# for (c in 231:length(codes)) {
for (c in 143:170) {
code <- codes[c]
########### ORIGIN & DESTINATIONS ###########
origin <- municipios %>%
filter(ine_code == code) %>%
.$loc_string
# api limit: 25 origins or 25 destinations
# cut the  sbst_dest
sbst_dest <- lista_origen_trabajo %>%
filter(origin_ine_code == code) %>%
mutate(group = ceiling(row_number()/23))
for (g in unique(sbst_dest$group)) {
sbst_group <- filter(sbst_dest, group == g)
destination <- c()
for (dest_code in unique(sbst_group$destination_ine_code)) {
tmp <- municipios %>%
filter(ine_code == dest_code) %>%
.$loc_string
destination <- paste(tmp, destination, sep = '|')
}
########### BUILD & CALL URL ###########
url <- paste0('https://maps.googleapis.com/maps/api/distancematrix/json?origins=',
origin,
'&destinations=',
destination,
'&mode=',
mode,
'&departure_time=',
dept_time,
'&traffic_model=',
traffic,
'&key=',
APIkey)
raw <- fromJSON(url)
########### RESHAPE THE DATA ###########
for (i in 1:(length(raw$destination_addresses))) {
# los datos
j <- length(raw$destination_addresses) - i + 1;
sbst <- jsonlite::flatten(raw$rows[1, ][[1]][j, ]) %>%
select(-contains('text')) %>%
mutate('origin' = raw$origin_addresses,
'origin_ine_code' = code,
'dest_ine_code' = sbst_group$destination_ine_code[i],
'destination' = raw$destination_addresses[j])
results <- bind_rows(results, sbst)
}
}
}
c
write_csv(results, 'temp_results.csv') # 170
# for (c in 231:length(codes)) {
for (c in 171:180) {
code <- codes[c]
########### ORIGIN & DESTINATIONS ###########
origin <- municipios %>%
filter(ine_code == code) %>%
.$loc_string
# api limit: 25 origins or 25 destinations
# cut the  sbst_dest
sbst_dest <- lista_origen_trabajo %>%
filter(origin_ine_code == code) %>%
mutate(group = ceiling(row_number()/23))
for (g in unique(sbst_dest$group)) {
sbst_group <- filter(sbst_dest, group == g)
destination <- c()
for (dest_code in unique(sbst_group$destination_ine_code)) {
tmp <- municipios %>%
filter(ine_code == dest_code) %>%
.$loc_string
destination <- paste(tmp, destination, sep = '|')
}
########### BUILD & CALL URL ###########
url <- paste0('https://maps.googleapis.com/maps/api/distancematrix/json?origins=',
origin,
'&destinations=',
destination,
'&mode=',
mode,
'&departure_time=',
dept_time,
'&traffic_model=',
traffic,
'&key=',
APIkey)
raw <- fromJSON(url)
########### RESHAPE THE DATA ###########
for (i in 1:(length(raw$destination_addresses))) {
# los datos
j <- length(raw$destination_addresses) - i + 1;
sbst <- jsonlite::flatten(raw$rows[1, ][[1]][j, ]) %>%
select(-contains('text')) %>%
mutate('origin' = raw$origin_addresses,
'origin_ine_code' = code,
'dest_ine_code' = sbst_group$destination_ine_code[i],
'destination' = raw$destination_addresses[j])
results <- bind_rows(results, sbst)
}
}
}
c
APIkey <-  'AIzaSyDQFPzJ0Sn4AmGzGuqpVduDvuNRmzjsUyg'
# for (c in 231:length(codes)) {
for (c in 179:210) {
code <- codes[c]
########### ORIGIN & DESTINATIONS ###########
origin <- municipios %>%
filter(ine_code == code) %>%
.$loc_string
# api limit: 25 origins or 25 destinations
# cut the  sbst_dest
sbst_dest <- lista_origen_trabajo %>%
filter(origin_ine_code == code) %>%
mutate(group = ceiling(row_number()/23))
for (g in unique(sbst_dest$group)) {
sbst_group <- filter(sbst_dest, group == g)
destination <- c()
for (dest_code in unique(sbst_group$destination_ine_code)) {
tmp <- municipios %>%
filter(ine_code == dest_code) %>%
.$loc_string
destination <- paste(tmp, destination, sep = '|')
}
########### BUILD & CALL URL ###########
url <- paste0('https://maps.googleapis.com/maps/api/distancematrix/json?origins=',
origin,
'&destinations=',
destination,
'&mode=',
mode,
'&departure_time=',
dept_time,
'&traffic_model=',
traffic,
'&key=',
APIkey)
raw <- fromJSON(url)
########### RESHAPE THE DATA ###########
for (i in 1:(length(raw$destination_addresses))) {
# los datos
j <- length(raw$destination_addresses) - i + 1;
sbst <- jsonlite::flatten(raw$rows[1, ][[1]][j, ]) %>%
select(-contains('text')) %>%
mutate('origin' = raw$origin_addresses,
'origin_ine_code' = code,
'dest_ine_code' = sbst_group$destination_ine_code[i],
'destination' = raw$destination_addresses[j])
results <- bind_rows(results, sbst)
}
}
}
c
cwrite_csv(results, 'temp_results.csv') # 170
write_csv(results, 'temp_results.csv') # 170
# for (c in 231:length(codes)) {
for (c in 211:250) {
code <- codes[c]
########### ORIGIN & DESTINATIONS ###########
origin <- municipios %>%
filter(ine_code == code) %>%
.$loc_string
# api limit: 25 origins or 25 destinations
# cut the  sbst_dest
sbst_dest <- lista_origen_trabajo %>%
filter(origin_ine_code == code) %>%
mutate(group = ceiling(row_number()/23))
for (g in unique(sbst_dest$group)) {
sbst_group <- filter(sbst_dest, group == g)
destination <- c()
for (dest_code in unique(sbst_group$destination_ine_code)) {
tmp <- municipios %>%
filter(ine_code == dest_code) %>%
.$loc_string
destination <- paste(tmp, destination, sep = '|')
}
########### BUILD & CALL URL ###########
url <- paste0('https://maps.googleapis.com/maps/api/distancematrix/json?origins=',
origin,
'&destinations=',
destination,
'&mode=',
mode,
'&departure_time=',
dept_time,
'&traffic_model=',
traffic,
'&key=',
APIkey)
raw <- fromJSON(url)
########### RESHAPE THE DATA ###########
for (i in 1:(length(raw$destination_addresses))) {
# los datos
j <- length(raw$destination_addresses) - i + 1;
sbst <- jsonlite::flatten(raw$rows[1, ][[1]][j, ]) %>%
select(-contains('text')) %>%
mutate('origin' = raw$origin_addresses,
'origin_ine_code' = code,
'dest_ine_code' = sbst_group$destination_ine_code[i],
'destination' = raw$destination_addresses[j])
results <- bind_rows(results, sbst)
}
}
}
c
APIkey <-  'AIzaSyCyu6bC0uPOtC-JTQllUV6MCUoErWDHW6Q'
length(codes)
APIkey <-  'AIzaSyCyu6bC0uPOtC-JTQllUV6MCUoErWDHW6Q'
write_csv(results, 'temp_results.csv') # 213
# for (c in 231:length(codes)) {
for (c in 213:255) {
code <- codes[c]
########### ORIGIN & DESTINATIONS ###########
origin <- municipios %>%
filter(ine_code == code) %>%
.$loc_string
# api limit: 25 origins or 25 destinations
# cut the  sbst_dest
sbst_dest <- lista_origen_trabajo %>%
filter(origin_ine_code == code) %>%
mutate(group = ceiling(row_number()/23))
for (g in unique(sbst_dest$group)) {
sbst_group <- filter(sbst_dest, group == g)
destination <- c()
for (dest_code in unique(sbst_group$destination_ine_code)) {
tmp <- municipios %>%
filter(ine_code == dest_code) %>%
.$loc_string
destination <- paste(tmp, destination, sep = '|')
}
########### BUILD & CALL URL ###########
url <- paste0('https://maps.googleapis.com/maps/api/distancematrix/json?origins=',
origin,
'&destinations=',
destination,
'&mode=',
mode,
'&departure_time=',
dept_time,
'&traffic_model=',
traffic,
'&key=',
APIkey)
raw <- fromJSON(url)
########### RESHAPE THE DATA ###########
for (i in 1:(length(raw$destination_addresses))) {
# los datos
j <- length(raw$destination_addresses) - i + 1;
sbst <- jsonlite::flatten(raw$rows[1, ][[1]][j, ]) %>%
select(-contains('text')) %>%
mutate('origin' = raw$origin_addresses,
'origin_ine_code' = code,
'dest_ine_code' = sbst_group$destination_ine_code[i],
'destination' = raw$destination_addresses[j])
results <- bind_rows(results, sbst)
}
}
}
c
write_csv(results, 'temp_results.csv') # 251
APIkey <-  'AIzaSyATzdnKH-qC4E_ZaI7ZfR6OcO57EGO4qOI'
# for (c in 231:length(codes)) {
for (c in 251:255) {
code <- codes[c]
########### ORIGIN & DESTINATIONS ###########
origin <- municipios %>%
filter(ine_code == code) %>%
.$loc_string
# api limit: 25 origins or 25 destinations
# cut the  sbst_dest
sbst_dest <- lista_origen_trabajo %>%
filter(origin_ine_code == code) %>%
mutate(group = ceiling(row_number()/23))
for (g in unique(sbst_dest$group)) {
sbst_group <- filter(sbst_dest, group == g)
destination <- c()
for (dest_code in unique(sbst_group$destination_ine_code)) {
tmp <- municipios %>%
filter(ine_code == dest_code) %>%
.$loc_string
destination <- paste(tmp, destination, sep = '|')
}
########### BUILD & CALL URL ###########
url <- paste0('https://maps.googleapis.com/maps/api/distancematrix/json?origins=',
origin,
'&destinations=',
destination,
'&mode=',
mode,
'&departure_time=',
dept_time,
'&traffic_model=',
traffic,
'&key=',
APIkey)
raw <- fromJSON(url)
########### RESHAPE THE DATA ###########
for (i in 1:(length(raw$destination_addresses))) {
# los datos
j <- length(raw$destination_addresses) - i + 1;
sbst <- jsonlite::flatten(raw$rows[1, ][[1]][j, ]) %>%
select(-contains('text')) %>%
mutate('origin' = raw$origin_addresses,
'origin_ine_code' = code,
'dest_ine_code' = sbst_group$destination_ine_code[i],
'destination' = raw$destination_addresses[j])
results <- bind_rows(results, sbst)
}
}
}
write_csv(results, 'temp_results.csv') # 255
########### PRETIFY THE OUTPUT ###########
results <- results %>%
mutate('mode' = mode,
'traffic' = traffic,
'departure_time' = dept_time)
names(results) <- gsub('.value', '', colnames(results), fixed = TRUE)
unique(results$status) # OK
results <- results %>%
distinct(status, distance, duration, duration_in_traffic, origin, destination, mode, traffic, departure_time)
paste(mode, traffic, 'distances.csv', sep = '_')
########### WRITE THE OUTPUT ###########
write_csv(results, paste(mode, traffic, 'distances.csv', sep = '_'))
